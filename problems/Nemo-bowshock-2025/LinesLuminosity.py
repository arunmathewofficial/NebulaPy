"""
Line Luminosity

Description:

Features:

Author: Arun Mathew
Date: 01 Feb 2025
"""

import os
import time
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.ticker import MultipleLocator, ScalarFormatter
from NebulaPy.tools import util
from NebulaPy.tools import constants as const
import NebulaPy.src as nebula

# Suppress specific warnings
warnings.filterwarnings("ignore", category=RuntimeWarning, message="divide by zero encountered in log10")

# Input-Output file  configuration for MIMIR
output_dir = '/home/tony/Desktop/multi-ion-bowshock/sims/out'  # Change as needed
silo_dir = '/home/tony/Desktop/multi-ion-bowshock/sims/silo'
filebase = 'Ostar_mhd-nemo-dep_d2n0128l3'  # Base name of the silo files

# Input-Output file  configuration for Razer Blade
output_dir = '/home/tony/Desktop/multi-ion-bowshock/sims/out'  # Change as needed
silo_dir = '/home/tony/Desktop/multi-ion-bowshock/sims/silo'
filebase = 'Ostar_mhd-nemo-dep_d2n0128l3'  # Base name of the silo files

# Batch the silo files for analysis within the specified time range
batched_silos = util.batch_silos(
    silo_dir,
    filebase,
    start_time=150,
    finish_time=None,
    time_unit='kyr',
    out_frequency=None
)

# Initialize the PION class to handle simulation data
pion = nebula.pion(batched_silos, verbose=True)
# Load chemistry and geometry data
pion.load_chemistry()
pion.load_geometry(scale='cm')

print(f" ---------------------------")
print(" task: calculating line luminosity for given lines")

# Set up the ion and line emission parameters
C2P_pion_ion = 'C2+'  # The ion of interest (Oxygen IV)
C2P_lines = [1906.683, 1908.734, 977.02]  # Emission line(s) of interest
print(rf" {C2P_pion_ion} lines: {', '.join(map(str, C2P_lines))}  Angstrom")

# Set up the ion and line emission parameters
O3P_pion_ion = 'O3+'  # The ion of interest (Oxygen IV)
O3P_lines = [2.589332e+05]  # Emission line of interest
print(rf" {O3P_pion_ion} lines: {', '.join(map(str, O3P_lines))} Angstrom")

# Set up the ion and line emission parameters
O5P_pion_ion = 'O5+'  # The ion of interest (Oxygen IV)
O5P_lines = [1031.9120, 1037.6130]  # Emission line(s) of interest
print(rf" {O5P_pion_ion} lines: {', '.join(map(str, O5P_lines))} Angstrom")

C2P_line_emission = nebula.line_emission(C2P_pion_ion, verbose=True)  # Initialize the emission line calculation
O3P_line_emission = nebula.line_emission(O3P_pion_ion, verbose=True)  # Initialize the emission line calculation
O5P_line_emission = nebula.line_emission(O5P_pion_ion, verbose=True)  # Initialize the emission line calculation

# Prepare output file for results
filename = filebase + '_lines_luminosity.txt'
outfile = os.path.join(output_dir, filename)

# Get geometry information
geometry = pion.geometry_container
N_grid_level = geometry['Nlevel']
grid_mask = geometry['mask']
cell_volume = pion.get_cylindrical_cell_volume().value

# Write initial header to the output file
with open(outfile, "w") as file:
    file.write(f"File generated by {util.nebula_version()}\n\n")
    file.write("Task: Determining the dominant spectral lines for the following ions\n")
    #file.write("   ".join(map(str, range(len(ion_list)))) + "\n")
    #file.write("   ".join(ion_list) + "\n\n")
    file.write(f"PION Simulation: NEMO Bowshock - FileBase: {filebase}\n\n")
    file.write("Dataset Description:\n")
    file.write("This dataset provides a list of the brightest spectral lines and their\n")
    file.write("corresponding luminosities. Each row represents a spectral line, with:\n\n")
    file.write("- Column 1: Spectral line wavelength (given in Angstrom, Å)\n")
    file.write("- Column 2: Line luminosity (measured in erg s⁻¹)\n\n")


# Loop over each time instant in the batched silo files
runtime = 0.0
for step, silo_instant in enumerate(batched_silos):
    silo_instant_start_time = time.time()

    print(f" ---------------------------")
    sim_time = pion.get_simulation_time(silo_instant, time_unit='kyr')
    print(f" step: {step} | simulation time: {sim_time:.6e}")

    with open(outfile, "a") as file:
        file.write(f"Step: {step} | Simulation Time: {sim_time:.6e}\n\n")

    # Extract temperature and electron number density
    temperature = pion.get_parameter('Temperature', silo_instant)
    ne = pion.get_ne(silo_instant)

    O2P_num_density = pion.get_ion_number_density(C2P_pion_ion, silo_instant)  # Retrieve ion mass fraction
    O3P_num_density = pion.get_ion_number_density(O3P_pion_ion, silo_instant)  # Retrieve ion mass fraction
    O5P_num_density = pion.get_ion_number_density(O5P_pion_ion, silo_instant)  # Retrieve ion mass fraction

    # Calculate the line luminosity for the specific emission line
    C2P_lines_luminosity = C2P_line_emission.line_luminosity_cylindrical(
        lines=C2P_lines,
        temperature=temperature,
        ne=ne,
        species_density=O2P_num_density,
        cell_volume=cell_volume,
        grid_mask=grid_mask)

    print(C2P_lines_luminosity)
    exit(1)

    # Calculate the line luminosity for the specific emission line
    O3P_line_emission.line_luminosity_cylindrical(
        lines=O3P_lines,
        temperature=temperature,
        ne=ne,
        cell_volume=cell_volume,
        grid_mask=grid_mask
    )

    # Calculate the line luminosity for the specific emission line
    O5P_line_emission.line_luminosity_cylindrical(
        lines=O5P_lines,
        temperature=temperature,
        ne=ne,
        cell_volume=cell_volume,
        grid_mask=grid_mask
    )

    # Update runtime
    silo_instant_finish_time = time.time()
    dt = silo_instant_finish_time - silo_instant_start_time
    runtime += dt
    print(f"Runtime: {runtime:.4e} s | Step Runtime: {dt:.4e} s")
    with open(outfile, "a") as file:
        file.write(f"Runtime: {runtime:.4e} s | Step Runtime: {dt:.4e} s\n\n")
